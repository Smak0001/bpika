<?php

namespace Tests\Unit;

use App\Services\PETService;
use DateTime;
use DateTimeZone;
use ErrorException;
use Tests\TestCase;

class PETTest extends TestCase {

    /**
     * @var PETService
     */
    private $PETService;

    public function setUp(): void {

        parent::setUp(); // TODO: Change the autogenerated
        $this->PETService = $this->app->make('App\Services\PETService');
    }

    public function testCanOpenTestFiles() {

        try {
            $inputFile = fopen(asset('storage/Binnenstad.csv'), 'r');
        }
        catch (ErrorException $exception) {
            $inputFile = FALSE;
            echo 'The input file doesn\'t exist';
        }

        try {
            $outputFile = fopen(asset('storage/Binnenstad_TCPET.csv'), 'r');
        }
        catch (ErrorException $exception) {
            $outputFile = FALSE;
            echo 'The output file doesn\'t exist';
        }

        try {
            $notExistingFile = fopen(asset('storage/notExisting.csv'), 'r');
        }
        catch (ErrorException $exception) {
            $notExistingFile = FALSE;
        }

        $this->assertFalse($inputFile === FALSE);
        $this->assertFalse($outputFile === FALSE);
        $this->assertTrue($notExistingFile === FALSE);
    }

    public function testInputShouldBeEqualToOutput() {

        /*
         * This file will be the input to test the PET calculation
         * It has been created from the values in Binnenstad.csv
         * For reference, the file has the following columns:
         * Year (Last 2 digits),
         * Month,
         * Day,
         * DOY (Day of the Year),
         * Hour,
         * Minutes,
         * Dectime [H] (Combined time of the day in hours as
         * a decimal number, ranges from 0 to below 24),
         * Dectyear[D] (Combined time of the year in days as
         * a decimal number, ranges from 0 to below 365 or 366,
         * depending on if the year is a leap year or not),
         * Patm [hPa] (Air pressure in hectoPascal),
         * Precip [mm] (Amount of precipitation in millimeters),
         * Tair [°C] (Air temperature in Celsius),
         * RH [%] (Relative air Humidity in percentages),
         * Tdauw [°C] (Dew point in Celsius),
         * Wind [m/s] (Wind speed in meters per second),
         * S_raw [W/m2] (Unscreened solar radiation in Watt per m²),
         * Sol [W/m2] (Screened solar radiation in Watt per m²),
         * Dir [W/m2] (Fraction of direct solar radiation in Watt per m²),
         * Dif [W/m2] (Fraction of diffuse solar radiation in Watt per m²),
         * Twb [°C] (Wet bulb temperature in Celsius),
         * Tglobe [°C] (Globe temperature in Celsius),
         * Tmrt [°C] (Mean radiant temperature in Celsius),
         * WBGT [°C] (Wet bulb globe temperature in Celsius),
         * PET [°C] (Physiologically Equivalent Temperature in Celsius)
        */
        $inputFile = fopen(asset('storage/Binnenstad_TCPET.csv'), 'r');
        $isFirstLine = true;
        $hasNotReachedEndOfFile = true;
        while ($hasNotReachedEndOfFile) {

            // Get the data from this row
            $rowData = fgetcsv($inputFile);

            // Check if we reached the end of the file
            if ($rowData === false) {
                $hasNotReachedEndOfFile = false;
                continue;
            }

            // Skip the first line, because these are column names
            if ($isFirstLine) {
                $isFirstLine = false;
                continue;
            }

            // Replace '#N/A' with null value
            $rowData = array_replace($rowData,
                array_fill_keys(
                    array_keys($rowData, '#N/A'),
                    null
                )
            );

            // Assign the values to local variables for readability
            $year = intval($rowData[0]);
            $month = intval($rowData[1]);
            $day = intval($rowData[2]);
            $DOY = intval($rowData[3]);
            $hours = intval($rowData[4]);
            $minutes = intval($rowData[5]);
            $decimalTime = floatval($rowData[6]);
            $decimalYear = floatval($rowData[7]);
            $airPressure = floatval($rowData[8]);
            $precipitation = floatval($rowData[9]);
            $airTemperature = floatval($rowData[10]);
            $humidity = floatval($rowData[11]);
            $dewPoint = floatval($rowData[12]);
            $windSpeed = floatval($rowData[13]);
            $unscreenedSolarRadiation = floatval($rowData[14]);
            $screenedSolarRadiation = floatval($rowData[15]);
            $fractionOfDirectSolarRadiation = floatval($rowData[16]);
            $fractionOfDiffuseSolarRadiation = floatval($rowData[17]);
            $wetBulbTemperature = floatval($rowData[18]);
            $globeTemperature = floatval($rowData[19]);
            $meanRadiantTemperature = floatval($rowData[20]);
            $wetBulbGlobeTemperature = floatval($rowData[21]);
            $PET = floatval($rowData[22]);

            // All the measurements from this file are from the Station HZ2
            // Therefore we will assign the latitude and the longitude from this station
            $latitude = 51.5;
            $longitude = 3.75;

            // Construct datetime from values
            $createdDateTimeString = sprintf(   '%u-%u-20%u %u:%u',
                                                $day, $month, $year, $hours, $minutes);
            $createdDateTime = new DateTime($createdDateTimeString);
            $createdDateTime->setTimezone(new DateTimeZone('UTC'));

            // Check DOY and Decimal time
            // Add one to DOY because date starts at 0, and DOY at 1
            $calculatedDOY = date('z', $createdDateTime->getTimestamp()) + 1;
            $this->assertTrue(  $calculatedDOY === $DOY,
                                sprintf('The day of year calculation is off by %u days.',
                                        abs($calculatedDOY - $DOY)));
            $calculatedDecimalTime =    floatval($createdDateTime->format('H')) +
                                        (floatval($createdDateTime->format('i'))/60) +
                                        (floatval($createdDateTime->format('s'))/3600);
            $this->assertTrue(  $calculatedDecimalTime === $decimalTime,
                                sprintf('The decimal time calculation is off by %u days.',
                                        abs($calculatedDecimalTime - $decimalTime)));

            // Calculate and check intermediate values if they are within acceptable limits
            // Currently, the accepted limit is: 0,001
            $acceptedLimit = 0.001;

            // Diffuse and Direct solar radiation
            $calculatedFractionOfDiffuseSolarRadiation = $this->PETService->fr_diffuse( $screenedSolarRadiation,
                                                                                        $latitude,
                                                                                        $longitude,
                                                                                        $DOY,
                                                                                        $decimalTime);
            $calculatedFractionOfDirectSolarRadiation = 1. - $calculatedFractionOfDiffuseSolarRadiation;
            $diffuseDifference = abs($calculatedFractionOfDiffuseSolarRadiation - $fractionOfDiffuseSolarRadiation);
            $this->assertTrue(  $diffuseDifference < $acceptedLimit,
                                sprintf('The fraction of diffuse solar radiation is off by %f Watts per m².',
                                        $diffuseDifference - $acceptedLimit));

            // Cosine of zenith angle
            $calculatedCosineOfZenithAngle = $this->PETService->sin_solar_elev( $latitude,
                                                                                $longitude,
                                                                                $DOY,
                                                                                $decimalTime);

            // Globe temperature
            // Currently no urban correction applied
            $urbanFactor = 1.;
            $calculatedGlobeTemperature = $this->PETService->calc_Tglobe(   $airTemperature,
                                                                            $humidity,
                                                                            $urbanFactor * $windSpeed,
                                                                            $screenedSolarRadiation,
                                                                            $calculatedFractionOfDirectSolarRadiation,
                                                                            $calculatedCosineOfZenithAngle);
            $globeTemperatureDifference = abs($calculatedGlobeTemperature - $globeTemperature);
            $this->assertTrue(  $globeTemperatureDifference < $acceptedLimit,
                                sprintf('The globe temperature is off by %f degrees.',
                                        $globeTemperatureDifference - $acceptedLimit));

            // Median radiant temperature
            $calculatedMeanRadiantTemperature = $this->PETService->Tmrt($calculatedGlobeTemperature,
                                                                        $airTemperature,
                                                                        $windSpeed);
            $meanRadiantTemperatureDifference = abs($calculatedMeanRadiantTemperature - $meanRadiantTemperature);
            $this->assertTrue(  $meanRadiantTemperatureDifference < $acceptedLimit,
                                sprintf('The mean radiant temperature is off by %f degrees.',
                                        $meanRadiantTemperatureDifference - $acceptedLimit));

            // System temperatures
            $systemOutput = $this->PETService->system(  $airTemperature,
                                                        $calculatedMeanRadiantTemperature,
                                                        $humidity,
                                                        $windSpeed);
            $calculatedCoreTemperature = $systemOutput[0];
            $calculatedTemperatureOfSkin = $systemOutput[1];
            $calculatedTemperatureOfClothes = $systemOutput[2];
            $calculatedEvaporationOfSweat = $systemOutput[3];

            // Calculate PET value
            $calculatedPET = $this->PETService->computePETFromMeasurement(  $createdDateTimeString,
                                                                            $airTemperature,
                                                                            $screenedSolarRadiation,
                                                                            $humidity,
                                                                            $windSpeed,
                                                                            $latitude,
                                                                            $longitude);

            // Check if the calculated PET value is within acceptable limits
            $PETDifference = abs($PET - $calculatedPET);
            $this->assertTrue(  $PETDifference < $acceptedLimit,
                                sprintf('The physiologically equivalent temperature is off by %f degrees.',
                                $PETDifference - $acceptedLimit));
        }
    }
}
